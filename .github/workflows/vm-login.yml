name: "Update VM Docker"

on:
  workflow_call:
    inputs:
      service_name:
        required: true
        type: string
      is_dev:
        required: true
        type: boolean
      is_image:
        required: true
        type: boolean
      port:
        required: false
        type: string

jobs:
  vm_actions:
    name: Update VM Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Login to VM and execute script
        uses: Comori/ssh@v0.0.7
        with:
          username: ${{ secrets.DEV_USER }}
          privateKey: ${{ secrets.DEV_KEY }}
          host: ${{ secrets.DEV_HOST }}
          command: |
            # Create a temporary script file on the VM
            touch update_vm_docker.sh | echo '
            cd Infrastructure

            # Log in to Docker
              sudo docker login ghcr.io -u "${{ github.actor }}" -p "${{ secrets.GITHUB_TOKEN }}"
              
            # Pull the latest image
            sudo docker pull ghcr.io/printscript8/${{ inputs.service_name }}:latest
            
            # Ensure existing container is stopped and removed, regardless of IS_IMAGE
            sudo docker stop ${{ inputs.service_name }} || true
            sudo docker rm ${{ inputs.service_name }} || true
            
            # Determine if we are in dev or prod environment based on IS_DEV and IS_IMAGE inputs
            if [ "${{ inputs.is_image }}" = "true" ]; then
              # If IS_IMAGE is true, run only the Docker image
              echo "Running the container without docker-compose"
              sudo docker run -d --name ${{ inputs.service_name }} -p ${{ inputs.port }}:8080 ghcr.io/printscript8/${{ inputs.service_name }}:latest
            else
              # If IS_IMAGE is false, first stop all running containers
              echo "Stopping all running containers..."
              sudo docker stop $(sudo docker ps -q) || true
              sudo docker rm $(sudo docker ps -aq) || true
          
              # Proceed with docker-compose based on the environment
              if [ "${{ inputs.is_dev }}" = "true" ]; then
                echo "Running docker-compose.dev.yaml"
                sudo docker-compose -f docker-compose.dev.yaml up -d
              else
                echo "Running docker-compose.prod.yaml"
                sudo docker-compose -f docker-compose.prod.yaml up -d
              fi
            fi
            ' > update_vm_docker.sh | chmod +x update_vm_docker.sh | bash update_vm_docker.sh | rm update_vm_docker.sh